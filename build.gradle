plugins {
    id "distribution"
    id "java"
    id "signing"
    id "org.sonarqube" version "3.5.0.2730"
}

// Kafka version
def kafkaVersion = '3.2.1'

group = 'com.ibm.cloud'
version = new File(rootDir, 'VERSION').text.trim()
// If the version says "snapshot" anywhere assume it is not a release
ext.isReleaseVersion = !version.toUpperCase(Locale.ENGLISH).endsWith("-SNAPSHOT")
ext.kafkaConnectorPropertyFileName = 'com.ibm.cloud.cloudant.kafka.client.properties'

repositories {
    if (System.env.ARTIFACTORY_URL != null) {
        maven {
            url "${System.env.ARTIFACTORY_URL}/cloudant-sdks-maven-virtual"
            credentials {
                username System.env.ARTIFACTORY_CREDS_USR
                password System.env.ARTIFACTORY_CREDS_PSW
            }
        }
    } else {
        mavenCentral()
    }
}

configurations {
    bundledImplementation
    implementation.extendsFrom bundledImplementation
}

dependencies {
    bundledImplementation group: 'com.ibm.cloud', name: 'cloudant', version: '0.4.0'
    implementation group: 'org.apache.kafka', name: 'connect-api', version: "${kafkaVersion}"
    implementation group: 'org.apache.kafka', name: 'connect-json', version: "${kafkaVersion}"
    implementation group: 'org.apache.kafka', name: 'connect-transforms', version: "${kafkaVersion}"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.powermock', name: 'powermock-api-easymock', version: '1.6.4'
    testImplementation group: 'org.easymock', name: 'easymock', version: '3.4'
    testImplementation group: 'com.carrotsearch', name: 'junit-benchmarks', version: '0.7.2'
    // for logging output when running tests
    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.36'
}

// Java versions
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Always UTF-8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

//
// Generate client.properties
//

//task for generating a client properties file
class ClientProperties extends DefaultTask {

    @OutputFile
    File clientPropsPath = new File(project.kafkaConnectorPropertyFileName)

    //internal
    private Properties p = new Properties()

    def load() {
        //if there is a generated file already load the values
        if (clientPropsPath.exists()) {
            p.load(new FileInputStream(clientPropsPath));
        }
    }

    @TaskAction
    def save() {
        p.put("user.agent.name", project.name)
        p.put("user.agent.version", project.version)
        p.store(new FileOutputStream(clientPropsPath), "User agent information for this client")
    }

    String getPropertyValue(String key) {
        return p.getProperty(key)
    }
}

//generate a client props file, make the jar task depend on this
task generateClientPropertiesFile(type: ClientProperties) {
    clientPropsPath = new File(buildDir, "tmp/${project.kafkaConnectorPropertyFileName}")
    outputs.upToDateWhen {
        if (clientPropsPath.exists()) {
            it.load()
            return project.name.equals(it.getPropertyValue("user.agent.name")) && project.version.equals(it.getPropertyValue("user.agent.version"))
        } else {
            return false
        }
    }
}
jar.dependsOn generateClientPropertiesFile

// modify the jar task to pull in required dependencies and add the client properties file
jar {
    into "META-INF", { 
        from generateClientPropertiesFile.clientPropsPath
        from 'LICENSE'
    }
}

distributions {
    main {
        contents {
            from 'README.md'
            from 'LICENSE'
            from('docs') {
                into 'docs'
            }
            from configurations.bundledImplementation
            from jar
        }
    }
}
// Produce only a zip
distTar.enabled = false

test {
    // Exclude the performance tests
    exclude 'com/ibm/cloud/cloudant/kafka/performance/**'
}

tasks.withType(Test) {
    // Transfer all gradle System properties to the test JVM
    systemProperties = System.getProperties()
    // Make sure it is UTF-8 for tests
    systemProperty "file.encoding", "UTF-8"
}

// Signatory config props
def signingProps = ['signing_keyId', 'signing_password', 'signing_secretKeyRingFile'];
// Load signatory config by translating underscore project props to dotted form
signingProps.each { propName ->
    ext.(propName.replace('_', '.').toString()) = findProperty(propName);
}

// Only sign when a key is provided by env var
tasks.withType(Sign) {
    onlyIf { 
        signingProps.every {propName -> 
            System.env["ORG_GRADLE_PROJECT_${propName}"] != null
        }
    }
}

signing {
    // When signing, sign the distribution zip
    sign distZip
}
