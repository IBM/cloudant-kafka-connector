apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

// Kafka version
def kafkaVersion = '3.2.1'

group = 'com.ibm.cloud'
version = new File(rootDir, 'VERSION').text.trim()
// If the version says "snapshot" anywhere assume it is not a release
ext.isReleaseVersion = !version.toUpperCase(Locale.ENGLISH).endsWith("-SNAPSHOT")
ext.kafkaConnectorPropertyFileName = 'com.ibm.cloud.cloudant.kafka.client.properties'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        // Confluent repo
        url 'https://packages.confluent.io/maven/'
    }
}

configurations {
    bundledImplementation
    implementation.extendsFrom bundledImplementation
}

dependencies {
    bundledImplementation group: 'com.ibm.cloud', name: 'cloudant', version: '0.2.0'
    implementation group: 'org.apache.kafka', name: 'connect-api', version: "${kafkaVersion}"
    implementation group: 'org.apache.kafka', name: 'connect-json', version: "${kafkaVersion}"
    implementation group: 'org.apache.kafka', name: 'connect-transforms', version: "${kafkaVersion}"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.powermock', name: 'powermock-api-easymock', version: '1.6.4'
    testImplementation group: 'org.easymock', name: 'easymock', version: '3.4'
    testImplementation group: 'com.carrotsearch', name: 'junit-benchmarks', version: '0.7.2'
    // for logging output when running tests
    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.36'
}

// Java versions
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Always UTF-8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

//
// Generate client.properties
//

//task for generating a client properties file
class ClientProperties extends DefaultTask {

    @OutputFile
    File clientPropsPath = new File(project.kafkaConnectorPropertyFileName)

    //internal
    private Properties p = new Properties()

    def load() {
        //if there is a generated file already load the values
        if (clientPropsPath.exists()) {
            p.load(new FileInputStream(clientPropsPath));
        }
    }

    @TaskAction
    def save() {
        p.put("user.agent.name", project.name)
        p.put("user.agent.version", project.version)
        p.store(new FileOutputStream(clientPropsPath), "User agent information for this client")
    }

    String getPropertyValue(String key) {
        return p.getProperty(key)
    }
}

//generate a client props file, make the jar task depend on this
task generateClientPropertiesFile(type: ClientProperties) {
    clientPropsPath = new File(buildDir, "tmp/${project.kafkaConnectorPropertyFileName}")
    outputs.upToDateWhen {
        if (clientPropsPath.exists()) {
            it.load()
            return project.name.equals(it.getPropertyValue("user.agent.name")) && project.version.equals(it.getPropertyValue("user.agent.version"))
        } else {
            return false
        }
    }
}
jar.dependsOn generateClientPropertiesFile

// modify the jar task to pull in required dependencies and add the client properties file
jar {
    duplicatesStrategy(duplicatesStrategy.EXCLUDE)
    into "META-INF", { 
        from generateClientPropertiesFile.clientPropsPath
        from 'LICENSE'
    }
    from {
        configurations.bundledImplementation.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

test {
    // Exclude the performance tests
    exclude 'com/ibm/cloud/cloudant/kafka/performance/**'
}

tasks.withType(Test) {
    // Transfer all gradle System properties to the test JVM
    systemProperties = System.getProperties()
    // Make sure it is UTF-8 for tests
    systemProperty "file.encoding", "UTF-8"
}
