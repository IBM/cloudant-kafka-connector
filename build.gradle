plugins {
    id "distribution"
    id "java"
    alias(libs.plugins.sq)
}
// Gradle 9+ supported

group = 'com.ibm.cloud'
version = file('VERSION').text.trim()
// If the version says "snapshot" anywhere assume it is not a release
ext.isReleaseVersion = !version.toUpperCase(Locale.ENGLISH).endsWith("-SNAPSHOT")
ext.kafkaConnectorPropertyFileName = 'com.ibm.cloud.cloudant.kafka.client.properties'

repositories {
    if (System.env.ARTIFACTORY_URL != null) {
        maven {
            url = "${System.env.ARTIFACTORY_URL}/cloudant-sdks-maven-virtual"
            credentials {
                username = System.env.ARTIFACTORY_CREDS_USR
                password = System.env.ARTIFACTORY_CREDS_PSW
            }
        }
    } else {
        mavenCentral()
    }
}

configurations {
    // Provide the compileOnly kafka dependencies to testImplementation
    // (i.e. make them available for test compile and test runtime)
    testImplementation.extendsFrom compileOnly
}

dependencies {
    implementation(libs.cloudant)
    compileOnly(libs.bundles.kafkaProvided)
    testImplementation(libs.bundles.testDeps)
    // for logging output when running tests
    testRuntimeOnly(libs.slf4jSimple)
}

tasks.withType(JavaCompile).configureEach {
    // Build with Java 17 compatibility (minimum for Kafka Connect 4.x)
    options.release = 17
    // Always UTF-8
    options.encoding = 'UTF-8'
}

// Enable PowerMock with JDK 17+
test { jvmArgs "--add-opens", "java.base/java.lang=ALL-UNNAMED" }

// modify the jar task to pull in required dependencies and metadata
jar {
    manifest {
        attributes(['Implementation-Title': rootProject.name,
            'Implementation-Version': version,
            'Implementation-Vendor': 'IBM'],
            'com/ibm/cloud/cloudant/kafka/utils/'
        )
    }
    into "META-INF", {
        from 'LICENSE'
    }
}

distributions {
    main {
        contents {
            from 'README.md'
            from 'LICENSE'
            from('docs') {
                into 'docs'
            }
            from jar
            // Package the runtimeClasspath dependencies (uber jar)
            from configurations.runtimeClasspath
        }
    }
}
// Produce only a zip
distTar.enabled = false

test {
    // Exclude the performance tests
    exclude 'com/ibm/cloud/cloudant/kafka/performance/**'
}

tasks.withType(Test) {
    // Transfer all gradle System properties to the test JVM
    systemProperties = System.getProperties()
    // Make sure it is UTF-8 for tests
    systemProperty "file.encoding", "UTF-8"
}

task signDistZip(group: 'Other', description: 'Signs the archive produced by the \'distZip\' task.') {
    onlyIf {
        System.env["CODE_SIGNING_PFX_FILE"] != null
    }
    doLast {
        def zipName = distZip.archiveFile.get().asFile
        ant.signjar(
            jar: zipName,
            tsaurl: 'http://timestamp.digicert.com',
            storetype: 'PKCS11',
            keystore: 'NONE',
            storepass: null,
            providerclass: 'sun.security.pkcs11.SunPKCS11',
            providerarg: '/home/jenkins/garasignconfig.txt',
            alias: 'PRD0002797key',
            preservelastmodified: 'true'
        )
    }
}
